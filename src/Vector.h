/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Object : VECTOR
//
//	Description : VECTOR is an object which represents a three dimensional vector.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __VECTOR_H__
#define __VECTOR_H__

#include <cmath>
#include <cstdlib>
#include <iostream>
#include "SSE_maths.h"

using namespace std;

class Vector
{
	public:
		//constructors
		Vector();
		Vector(const Vector& vec);
		Vector(float x, float y, float z, float w = 0.0f);
		
        void set(const float x, const float y, const float z, const float w = 0.0f);
    
		//assignment operator
		Vector& operator=(const Vector& vec);
		
		//vector operations
		Vector& operator+=(const Vector& vec);
		Vector& operator-=(const Vector& vec);
		Vector& operator*=(const Vector& vec);
		Vector operator+(const Vector& vec) const;
		Vector operator-(const Vector& vec) const;
		Vector operator*(const Vector& vec) const;
		float dot(const Vector& vec) const;
	
		Vector& normalise();	
		
		//scalar operations
		Vector& operator*=(const float scalar);
		Vector operator*(const float scalar) const;
		
		//member variables
		float _x;
		float _y;
		float _z;
		float _w;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::Vector
//
//	Comments : Default Constructor. All values initialised to zero.
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector::Vector() : _x(0.0f), _y(0.0f), _z(0.0f), _w(0.0f) { }
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::Vector
//
//	Comments : Copy constructor
//
//	Arguments:	vec is the vector to copy to create this vector
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector::Vector(const Vector& vec) : _x(vec._x), _y(vec._y), _z(vec._z), _w(vec._w) { }
	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::Vector
//
//	Comments : Normal constructor with specified points
//
//	Arguments:	x is the x coordinate of the vector
//				y is the y coordinate of the vector
//				z is the z coordinate of the vector
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector::Vector(float x, float y, float z, float w): _x(x), _y(y), _z(z), _w(w) { }

inline void Vector::set(const float x, const float y, const float z, const float w) {
    _x = x;
    _y = y;
    _z = z;
    _w = w;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator=
//
//	Comments : Assignment operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::operator=(const Vector& vec)
{
	_x = vec._x;
	_y = vec._y;
	_z = vec._z;
	_w = vec._w;
	return *this;
}
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator+=
//
//	Comments : Vector Addition through the += operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::operator+=(const Vector& vec)
{
	_x += vec._x;
	_y += vec._y;
	_z += vec._z;
	_w += vec._w;
	
	return *this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator-*
//
//	Comments : Vector subraction through the -= operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::operator-=(const Vector& vec)
{
	_x -= vec._x;
	_y -= vec._y;
	_z -= vec._z;
	_w -= vec._w;
	
	return *this;
}

//
//	Vector::operator*=
//
//	Comments : Vector Cross Product through the *= operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::operator*=(const Vector& vec)
{
	float x = (_y * vec._z) - (vec._y * _z);
	float y = (vec._x * _z) - (_x * vec._z);
	float z = (_x * vec._y) - (vec._x * _y);
	
	_x = x;
	_y = y;
	_z = z;

	return *this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator+
//
//	Comments : Vector Additon through the + operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector Vector::operator+(const Vector& vec) const
{
	return Vector(_x + vec._x, _y + vec._y, _z + vec._z, _w + vec._w);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator-
//
//	Comments : Vector Subtraction through the - operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector Vector::operator-(const Vector& vec) const
{
	return Vector(_x - vec._x, _y - vec._y, _z - vec._z);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator*
//
//	Comments : Vector Cross Product through the * operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector Vector::operator*(const Vector& vec) const
{
	float x = (_y * vec._z) - (vec._y * _z);
	float y = (vec._x * _z) - (_x * vec._z);
	float z = (_x * vec._y) - (vec._x * _y);
	
	return Vector(x, y, z);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::dot
//
//	Comments : Vector Dot Product with a vector as the argument
//
//	Arguments:	vec is a vector to apply the dot product to
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline float Vector::dot(const Vector& vec) const
{
	return (_x * vec._x) + (_y * vec._y) + (_z * vec._z);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::normalise
//
//	Comments : Returns this vector normalised (unit length)
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::normalise()
{
    /*
	float t = (_x * _x) + (_y * _y) + (_z * _z);
	
	if (t != 0.0f && t != 1.0f)
	{
		t = _mm_sqrtApprox_ps(t);
        
        _x *= t;
        _y *= t;
        _z *= t;
	}
     */
	return *this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator*=
//
//	Comments : Preforms scalar multiplication of this vector through the *= operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector& Vector::operator*=(const float scalar)
{
	_x *= scalar;
	_y *= scalar;
	_z *= scalar;

	return *this;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Vector::operator*
//
//	Comments : Preforms scalar multiplcation of this vector through the * operator
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector Vector::operator*(const float scalar) const
{
	return Vector(_x * scalar, _y * scalar, _z * scalar);

}


#endif
