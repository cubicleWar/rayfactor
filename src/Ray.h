/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	Object : Ray
//
//	Description : Ray represents a virtual ray which travels through the user specified 'scene'
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef __RAY_H__
#define __RAY_H__

#include "Vector.h"

using namespace std;

class Ray
{   
    public:
		Vector s;				// The orgin of the ray
        Vector c;				// The direction the ray is traveling
		
        Ray();
        void setStart(const float &sX, const float &sY, const float &sZ);
        void setDir(Vector dir);
        Vector rayPos(const float &t);
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Ray::Ray
//
//	Comments : Default constructor, sets the origin of the ray to the cartesian origin
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Ray::Ray()
{
    s = Vector(0.0f,0.0f,0.0f,1.0f);
	c = Vector(0.0f,0.0f,0.0f,0.0f);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Ray::setStart
//
//	Comments : Sets the start point (origin) of the ray given cartesian co-ordinates
//
//	Arguments:	sX is the x component of the start point
//				sY is the y component of the start point
//				sZ is the z component of the start point
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline void Ray::setStart(const float &sX, const float &sY, const float &sZ)
{
    s = Vector(sX, sY, sZ);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Ray::setDir
//
//	Comments : Sets the direction of the ray
//
//	Arguments:	dir is a vector containing the direction for this vector
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline void Ray::setDir(Vector dir)
{
    c = dir.normalise();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	Ray::rayPos
//
//	Comments : Returns a three dimensional point representing the rays position at a given time.
//
//	Arguments:	t is the time to evaluate the rays position at
//
//	Date		Developer		Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	01/02/06	Trevor Walker	Created
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Vector Ray::rayPos(const float &t)
{
    return Vector(s._x + c._x*t, s._y + c._y*t, s._z + c._z*t, 1.0f);
}


#endif
